name: Maven Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        default: ''
      dry_run:
        description: 'Dry run only (no actual release)'
        type: boolean
        default: true

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full git history for releases
      
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          server-id: github
          cache: maven
      
      - name: Configure Git user
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
      
      - name: Extract version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Extract version from the tag
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            # Use the version provided in the workflow dispatch
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and test
        run: mvn -B clean verify
      
      - name: Set version
        run: mvn -B versions:set -DnewVersion=${{ steps.get_version.outputs.VERSION }}
      
      - name: Create Release Notes
        run: |
          echo "# Release ${{ steps.get_version.outputs.VERSION }}" > release-notes.md
          echo "" >> release-notes.md
          echo "## Changes in this release" >> release-notes.md
          echo "" >> release-notes.md
          git log $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD~10)..HEAD --pretty=format:"* %s" >> release-notes.md
      
      - name: Create Release
        if: ${{ github.event.inputs.dry_run != 'true' }}
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          files: |
            **/target/*.jar
      
      - name: Publish to GitHub Packages
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: mvn -B deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create new development version
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          # Calculate next snapshot version (e.g., 1.2.3 -> 1.2.4-SNAPSHOT)
          VERSION=${{ steps.get_version.outputs.VERSION }}
          MAIN_VERSION=${VERSION%%.*}
          MIDDLE_VERSION=${VERSION#*.}
          MIDDLE_VERSION=${MIDDLE_VERSION%%.*}
          PATCH_VERSION=${VERSION##*.}
          NEW_PATCH=$((PATCH_VERSION + 1))
          NEXT_VERSION="${MAIN_VERSION}.${MIDDLE_VERSION}.${NEW_PATCH}-SNAPSHOT"
          mvn -B versions:set -DnewVersion=${NEXT_VERSION}
          git commit -am "Prepare for next development iteration: ${NEXT_VERSION}"
          git push
